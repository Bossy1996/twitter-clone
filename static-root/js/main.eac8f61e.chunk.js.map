{"version":3,"sources":["logo.svg","tweets/components.js","lookup/components.js","App.js","reportWebVitals.js","index.js"],"names":["TweetsComponent","props","textAreaRef","React","createRef","useState","newTweets","setNewTweets","className","onSubmit","event","preventDefault","new_value","current","value","console","log","tempNewTweets","unshift","content","likes","id","ref","required","name","type","TweetsList","tweetsInit","setTweetsInit","tweets","setTweets","useEffect","final","concat","length","callback","xhr","XMLHttpRequest","responseType","open","onload","response","status","onerror","error","send","loadTweets","finalTweetsInit","alert","map","item","index","Tweet","tweet","ActionBtn","action","setLikes","userLike","setUserlike","actionDisplay","display","onClick","like","App","src","logo","alt","href","target","rel","reportWebVitals","onPerfEntry","Function","then","getCLS","getFID","getFCP","getLCP","getTTFB","appEl","document","getElementById","ReactDOM","render","StrictMode","tweetElement"],"mappings":"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","file":"static/js/main.eac8f61e.chunk.js","sourcesContent":["export default __webpack_public_path__ + \"static/media/logo.6ce24c58.svg\";","import React from 'react';\r\nimport {useEffect, useState} from 'react';\r\n\r\nimport { loadTweets } from '../lookup';\r\n\r\nexport function TweetsComponent(props) {\r\n    const textAreaRef = React.createRef()\r\n    const [newTweets, setNewTweets] = useState([])\r\n    const handleSubmit = (event) => {\r\n        event.preventDefault()\r\n        const new_value = textAreaRef.current.value\r\n        console.log(new_value)\r\n        let tempNewTweets = [...newTweets]\r\n        tempNewTweets.unshift({\r\n            content: new_value,\r\n            likes: 0,\r\n            id: 12345\r\n        })\r\n        setNewTweets(tempNewTweets)\r\n        textAreaRef.current.value = ''\r\n\r\n    }\r\n    return <div className={props.className}>\r\n        <div className='col-12 mb-3'>\r\n            <form onSubmit={handleSubmit}>\r\n                <textarea ref={textAreaRef} required={true} className='form-control' name='tweet'>\r\n\r\n                </textarea>\r\n                <button type='submit' className='btn btn-primary my-3'>Tweet</button>\r\n            </form>\r\n        </div>\r\n        <TweetsList newTweets={newTweets}/>\r\n    </div>\r\n}\r\n\r\nexport function TweetsList(props) {\r\n    const [tweetsInit, setTweetsInit] = useState(props.newTweets ? props.newTweets: []);\r\n    const [tweets, setTweets] = useState([])\r\n    // setTweetsInit([...props.newTweets].concat(tweetsInit))\r\n    useEffect(() => {\r\n        let final = [...props.newTweets,].concat(tweetsInit)\r\n        if (final.length !== tweets.length) {\r\n            setTweets(final)  \r\n        }\r\n                 \r\n    }, [props.newTweets, tweetsInit, tweets])\r\n    useEffect(() => {\r\n     // do my lookup\r\n     const myCallback = (response, status) => {\r\n       console.log(response, status)\r\n       if (status === 200) {\r\n           const finalTweetsInit = [...response].concat(tweetsInit)\r\n        setTweetsInit(finalTweetsInit) \r\n       } else {\r\n         alert(\"There was an error\")\r\n       }\r\n    }\r\n     loadTweets(myCallback)\r\n    }, [tweetsInit])\r\n    return tweets.map((item, index) => {\r\n      return <Tweet tweet={item} className='my-5 py-5 boder bg-white text-dark' key={`${index}-{item.id}`} />\r\n    })\r\n  }\r\n\r\nexport function ActionBtn(props){\r\n    const {tweet, action} = props\r\n    const [likes, setLikes] = useState(tweet.likes ? tweet.likes: 0)\r\n    const [userLike, setUserlike] = useState(tweet.userLike === true ? true : false)\r\n    const className = props.className ? props.className: 'btn btn-small btn-primary'\r\n    const actionDisplay = action.display ? action.display: 'Action'\r\n    const handleClick = (event) => {\r\n        event.preventDefault()\r\n        if (action.type === 'like') {\r\n            if (userLike === true) {\r\n                setLikes(likes - 1)\r\n                setUserlike(false)\r\n            } else {\r\n                setLikes(tweet.like+1)\r\n                setUserlike(true)\r\n            }\r\n            \r\n        }\r\n    }\r\n    const display = action.type === \"like\" ? `${likes} ${actionDisplay}`: actionDisplay\r\n    return <buttom className={className} onClick={handleClick} >{display}</buttom>\r\n  }\r\n  \r\nexport function Tweet(props) {\r\n    const {tweet} = props\r\n    const className = props.className ? props.className: 'col-10 mx-auto col-md-6'\r\n    return <div className={className}>\r\n      <p> {tweet.id} - {tweet.content}</p>\r\n      <div className='btn btn-primary'>\r\n        <ActionBtn tweet={tweet} action={{type: 'like', display: 'Likes'}}/>\r\n        <ActionBtn tweet={tweet} action={{type: 'unlike', display: 'UnLikes'}}/>\r\n        <ActionBtn tweet={tweet} action={{type: 'retweet', display: 'Retweet'}}/>\r\n      </div>\r\n    </div>\r\n  }","export const loadTweets = (callback) => {\r\n    const xhr = new XMLHttpRequest()\r\n    const mehotd = 'GET'\r\n    const url = \"http://localhost:8000/api/tweets\"\r\n    const responseType = \"json\"\r\n    xhr.responseType = responseType\r\n    xhr.open(mehotd, url)\r\n    xhr.onload = () => {\r\n      callback(xhr.response, xhr.status)\r\n    }\r\n    xhr.onerror = function (error) {\r\n      console.log(error)\r\n      callback({\"message\": \"The request was an error\"}, 400)\r\n    }\r\n    xhr.send()\r\n  }","import logo from './logo.svg';\r\nimport './App.css';\r\n\r\n\r\nimport {TweetsComponent} from './tweets';\r\n\r\n\r\n\r\nfunction App() {\r\n\r\n  return (\r\n    <div className=\"App\">\r\n      <header className=\"App-header\">\r\n        <img src={logo} className=\"App-logo\" alt=\"logo\" />\r\n        <p>\r\n          Edit <code>src/App.js</code> and save to reload.\r\n        </p>\r\n        <div>\r\n          <TweetsComponent />\r\n        </div>\r\n        <a\r\n          className=\"App-link\"\r\n          href=\"https://reactjs.org\"\r\n          target=\"_blank\"\r\n          rel=\"noopener noreferrer\"\r\n        >\r\n          Learn React\r\n        </a>\r\n      </header>\r\n    </div>\r\n  );\r\n}\r\n\r\nexport default App;\r\n","const reportWebVitals = onPerfEntry => {\n  if (onPerfEntry && onPerfEntry instanceof Function) {\n    import('web-vitals').then(({ getCLS, getFID, getFCP, getLCP, getTTFB }) => {\n      getCLS(onPerfEntry);\n      getFID(onPerfEntry);\n      getFCP(onPerfEntry);\n      getLCP(onPerfEntry);\n      getTTFB(onPerfEntry);\n    });\n  }\n};\n\nexport default reportWebVitals;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport './index.css';\nimport App from './App';\nimport reportWebVitals from './reportWebVitals';\nimport { TweetsComponent } from './tweets';\n\nconst appEl = document.getElementById('root')\nif (appEl) {\n  ReactDOM.render(\n    <React.StrictMode>\n      <App />\n    </React.StrictMode>,\n    appEl\n  );\n}\nconst tweetElement = document.getElementById(\"root-2\")\nif (tweetElement) {\n  ReactDOM.render(\n    <React.StrictMode>\n      <TweetsComponent />\n    </React.StrictMode>,\n    tweetElement\n  );\n}\n\n\n// If you want to start measuring performance in your app, pass a function\n// to log results (for example: reportWebVitals(console.log))\n// or send to an analytics endpoint. Learn more: https://bit.ly/CRA-vitals\nreportWebVitals();\n"],"sourceRoot":""}